# -*- coding: utf-8 -*-
"""Function_Practice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AnLCJkmLO59pj73xETf6zT__-bg4RiDH

1. Write a Python function to find the maximum of three numbers.
"""

def max_of_three(num1,num2,num3):
  return max(num1,num2,num3)
result = max_of_three(25,30,50)
print("Maximum Number: ",result)

def max_of_three(num1,num2,num3):
  if num1>num2 and num1>num3:
    print(num1," is maximum number")
  elif num2>num3:
    print(num2," is maximum number")
  else:
    print(num3," is maximum number")
num1 = int(input("Enter number1: "))
num2 = int(input("Enter number2: "))
num3 = int(input("Enter number3: "))

max_of_three(num1,num2,num3)



"""2. Write a Python function to sum all the numbers in a list.
Sample List : (8, 2, 3, 0, 7)
Expected Output : 20
"""

def sumall(list1):
  summ = 0
  for i in list1:
    summ += i
  return summ
list1 = [8,2,3,0,7]
sumall(list1)



"""3. Write a Python function to multiply all the numbers in a list.
Sample List : (8, 2, 3, -1, 7)
Expected Output : -336
"""

def multiply(list1):
  mult = 1
  for i in list1:
    mult *= i
  return mult
list1 = [8,2,3,-1,7]
multiply(list1)



"""4. Write a Python program to reverse a string.
Sample String : "1234abcd"
Expected Output : "dcba4321"

"""

def rev(sample_string):
  # print(sample_string[::-1])
  return sample_string[::-1]
sample_string = "1234abcd"
rev(sample_string)



"""5. Write a Python function to calculate the factorial of a number (a non-negative integer). The function accepts the number as an argument.

"""

def fact(num):
  prod = 1
  for i in range (2, num+1):
    prod = prod*i
  return prod
num = int(input("Enter Number: "))
fact(num)



"""6. Write a Python function to check whether a number falls within a given range.

"""

def range1(num, lower, upper):
  if num>lower and num<upper:
    print("Number is within range")
  else:
    print("Number is not within range")
num = int(input("Enter number: "))
lower = int(input("Enter lower limit: "))
upper = int(input("Enter upper limit: "))
range1(num,lower,upper)

def range1(num, lower, upper):
  if num in range(lower,upper):
    print("Number is within range")
  else:
    print("Number is not within range")
num = int(input("Enter number: "))
lower = int(input("Enter lower limit: "))
upper = int(input("Enter upper limit: "))
range1(num,lower,upper)



"""7. Write a Python function that accepts a string and counts the number of upper and lower case letters.
Sample String : 'The quick Brow Fox'
Expected Output :
No. of Upper case characters : 3
No. of Lower case Characters : 12
"""

def uplow(Sample_String):
  countu = 0
  countl = 0
  for i in Sample_String:
    if i.isupper():
      countu += 1
    elif i.islower():
      countl += 1
  print("Number of upper case letters: ",countu)
  print("Number of lower case letters: ",countl)
Sample_String = "The quick Brow Fox"
print("Sample String: ",Sample_String)
uplow(Sample_String)

def uplow(Sample_String):
  countu = 0
  countl = 0
  for i in Sample_String:
    if i.isupper():
      countu += 1
    elif i.islower():
      countl += 1
  print("Number of upper case letters: ",countu)
  print("Number of lower case letters: ",countl)
Sample_String = "The quick Brow Fox"
print("Sample String: ",Sample_String)
uplow(Sample_String)

l=Sample_String.count(str(Sample_String.islower()))
l



"""8. Write a Python function that takes a list and returns a new list with distinct elements from the first list.
Sample List : [1,2,3,3,3,3,4,5]
Unique List : [1, 2, 3, 4, 5]
"""

def distinct(list1):
  a = set(list1)
  b = list(a)
  print("Unique List: ",b)

list1 = [1,2,3,3,3,3,4,5]
print("Sample List: ",list1)
distinct(list1)



"""9. Write a Python function that takes a number as a parameter and checks whether the number is prime or not.
Note : A prime number (or a prime) is a natural number greater than 1 and that has no positive divisors other than 1 and itself.
"""

a = int(input('Enter the number: '))
while True:
  b=list(range(2,a))
  for i in b:
    if a%i==0:
      print(a,'is not a prime number')
    else:
      print(a,'is a prime number')
    break
  break

n=int(input('Enter a number:'))
check=''
for i in range(2,n):
  if n%i!=0:
    check='prime'
  elif n%i==0:
      check='not prime'
      break
  else:
      print('There is some error.')
if n<2:
  check='not prime'
elif n==2:
  check='prime'
print('The given number',n, 'is:',check)



"""10. Write a Python program to print the even numbers from a given list.
Sample List : [1, 2, 3, 4, 5, 6, 7, 8, 9]
Expected Result : [2, 4, 6, 8]xz
"""

def even(list1):
  list2 = [e for e in list1 if e%2==0]
  print("Expected Output: ",list2)

list1 = [1,2,3,4,5,6,7,8,9]
print("Sample List: ",list1)
even(list1)



"""#### 11.Write a Python function to check whether a number is "Perfect" or not.
#### According to Wikipedia : In number theory, a perfect number is a positive integer that is equal to the sum of its proper positive divisors, that is, the sum of its positive divisors excluding the number itself (also known as its aliquot sum). Equivalently, a perfect number is a number that is half the sum of all of its positive divisors (including itself).
####**bold text** Example : The first perfect number is 6, because 1, 2, and 3 are its proper positive divisors, and 1 + 2 + 3 = 6. Equivalently, the number 6 is equal to half the sum of all its positive divisors: ( 1 + 2 + 3 + 6 ) / 2 = 6. The next perfect number is 28 = 1 + 2 + 4 + 7 + 14. This is followed by the perfect numbers 496 and 8128.

"""

def perf(num):
  sum1 = 0
  for i in range(1,num):
    if num % i == 0:
      sum1 = sum1 + i
  if sum1 == num:
    print("Number is Perfect Number")
  else:
    print("Number is not Perfect Number")
num = int(input("Enter Number: "))
perf(num)

num = int(input("Enter Number: "))
sum1 = 0
for i in range(1,num):
  if num % i == 0:
    sum1 = (sum1 + i)
if sum1 == num:
  print("Number is Perfect Number")
else:
  print("Number is not Perfect Number")



""" #### 12. Write a Python function that checks whether a passed string is a palindrome or not.
#### Note: A palindrome is a word, phrase, or sequence that reads the same backward as forward, e.g., madam or nurses run.
"""

def palin(str1):
  a = str1.replace("","")
  print(a)
  if a==a[::-1]:
    return "String is Palindrome"
  else:
   return "String is not Palindrome"

str1 = "chat"
print(palin(str1))

"""

```
# This is formatted as code
```



#### 13. Write a Python function that prints out the first n rows of Pascal's triangle.
#### Note : Pascal's triangle is an arithmetic and geometric figure first imagined by Blaise Pascal.
#### Sample Pascal's triangle :
#### Pascal's triangle
#### Each number is the two numbers above it added together

"""

# input n
n = int(input("Enter the number of rows:"))

# iterarte upto n
for i in range(n):
   # adjust space
   print(' '*(n-i), end='')

   # compute power of 11
   print(' '.join(map(str, str(11**i))))

def solve(n):
   for i in range(n+1):
      for j in range(n-i):
         print(' ', end='')

      C = 1
      for j in range(1, i+1):
         print(C, ' ', sep='', end='')
         C = C * (i - j) // j
      print()

n = 5
solve(n)

def pascal_triangle(n):
  if n < 0:
    return []
  triangle = [[1]]
  for _ in range (1,n):
    triangle.append([1] + [triangle[-1][i-1] + triangle[-1][i] for i in range(1, len(triangle[-1]))] + [1])
  return triangle
print(*map(lambda row: print(*row), pascal_triangle(5)))

def pascal_triangle(n):
  if n < 0:
    return []
  triangle = [[1]]
  for _ in range(1, n):
    triangle.append([1] + [triangle[-1][i-1] + triangle[-1][i] for i in range(1, len(triangle[-1]))] + [1])
  return triangle
print(*map(lambda row: print(*row), pascal_triangle(5)))



"""#### 14. Write a Python function to check whether a string is a pangram or not.

1.   List item
2.   List item


#### Note : Pangrams are words or sentences containing every letter of the alphabet at least once.
#### For example : "The quick brown fox jumps over the lazy dog"
"""

import string
def is_pangram(sentence):
  """
  This function checks if a given sentence is a pangram.

  Args:
      sentence: The sentence to check.

  Returns:
      True if the sentence is a pangram, False otherwise.
  """
  # Convert sentence to lowercase and remove punctuation
  alphabet = set(string.ascii_lowercase)
  sentence = set(char.lower() for char in sentence if char.isalpha())

  # Check if all letters in the alphabet are present
  return alphabet.issubset(sentence)

# Example usage
sentence1 = "The quick brown fox jumps over the lazy dog"
sentence2 = "Hello, world!"

print(is_pangram(sentence1))  # True
print(is_pangram(sentence2))  # False

import string

alphabet = set(string.ascii_lowercase)

def ispangram(str):
     return not set(alphabet) - set(str)

# Driver code
string = 'the quick brown fox jumps over the lazy dog'
if(ispangram(string) == True):
    print("Yes")
else:
    print("No")




"""#### 15. Write a Python program that accepts a hyphen-separated sequence of words as input and prints the words in a hyphen-separated sequence after sorting them alphabetically.
#### Sample Items : green-red-yellow-black-white
#### Expected Result : black-green-red-white-yellow
"""

def hyphen(str1):
  str2 = str1.split("_")
  str3 = sorted(str2)
  for i in str3:
    print(i,end="_")
str1 = "green_red_yellow_black_white"
print("Sample Items: ",str1)
hyphen(str1)




"""#### 16. Write a Python function to create and print a list where the values are the squares of numbers between 1 and 30 (both included).

"""

def sqr(num):
  list1 = []
  for i in range(1,num+1,1):
     a = i*i
     list1.append(a)

  return (list1)

num = 30
print(sqr(num))




"""#### 17. Write a Python program to create a chain of function decorators (bold, italic, underline etc.).

"""

def bold(text):
  return f"<b>{text}</b>"
def italic(text):
  return f"<i>{text}</i>"
def underline(text):
  return f"<u>{text}</u>"
def format_text(text):
  text = underline(text)
  text = italic(text)
  text = bold(text)
formatted_text = format_text("This is formatted text")
print(formatted_text)